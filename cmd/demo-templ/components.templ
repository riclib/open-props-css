package main

import (
	"fmt"
	"github.com/riclib/open-props-css/op"
	"github.com/riclib/open-props-css/icon"
)

// Layout wraps the entire page
templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link rel="stylesheet" href="/static/dashboard.css"/>
		</head>
		<body>
			<nav>
				<h1>Op Package Demo</h1>
				<ul>
					<li><a href="/" class="active">Components</a></li>
					<li><a href="/colors">Colors</a></li>
					<li><a href="/spacing">Spacing</a></li>
					<li><a href="/animations">Animations</a></li>
					<li><a href="/icons">Icons</a></li>
				</ul>
			</nav>
			<main>
				{ children... }
			</main>
		</body>
	</html>
}

// DynamicButton demonstrates using op package for dynamic styling
templ DynamicButton(text string, variant string, size int) {
	<button style={ buttonStyle(variant, size) }>
		{ text }
	</button>
}

func buttonStyle(variant string, size int) string {
	style := op.NewStyle().
		Padding(op.Size(size)).
		BorderRadius(op.Radius(2)).
		FontWeight(op.Font.Weight(6)).
		TransitionProperty("all").
		TransitionDuration("200ms").
		TransitionTimingFunction(op.Ease.Out(3))

	switch variant {
	case "primary":
		style.Background(op.Color.Primary()).
			Color("white").
			Custom("border", "none")
	case "secondary":
		style.Background("transparent").
			Color(op.Color.Text()).
			Custom("border", fmt.Sprintf("1px solid %s", op.Color.Border()))
	case "success":
		style.Background(op.Color.Green(6)).
			Color("white").
			Custom("border", "none")
	case "danger":
		style.Background(op.Color.Red(6)).
			Color("white").
			Custom("border", "none")
	default:
		style.Background(op.Color.Gray(3)).
			Color(op.Color.Text()).
			Custom("border", "none")
	}

	return style.String()
}

// ColorScale shows all shades of a color
templ ColorScale(name string, colorFunc func(int) string) {
	<div class="mb-4">
		<h3>{ name }</h3>
		<div class="grid grid-cols-13 gap-1">
			for i := 0; i <= 12; i++ {
				<div
					style={ fmt.Sprintf("background: %s; height: 60px; border-radius: %s; display: flex; align-items: center; justify-content: center; color: %s",
						colorFunc(i),
						op.Radius(1),
						textColorForBackground(i)) }
				>
					{ fmt.Sprintf("%d", i) }
				</div>
			}
		</div>
	</div>
}

func textColorForBackground(scale int) string {
	if scale < 6 {
		return op.Color.Gray(12)
	}
	return op.Color.Gray(0)
}

// AnimatedCard demonstrates animations
templ AnimatedCard(title, content, animation string) {
	<div class="card" style={ fmt.Sprintf("animation: %s", animation) }>
		<h3>{ title }</h3>
		<p>{ content }</p>
		<p class="text-muted text-small">Animation: { animation }</p>
	</div>
}

// SpacingVisualizer shows spacing scale
templ SpacingVisualizer() {
	<div class="card">
		<h3>Spacing Scale</h3>
		<div class="flex flex-col gap-2">
			@SpacingItem(-2, "000")
			@SpacingItem(-1, "00")
			for i := 1; i <= 15; i++ {
				@SpacingItem(i, fmt.Sprintf("%d", i))
			}
		</div>
	</div>
}

templ SpacingItem(size int, label string) {
	<div class="flex items-center gap-3">
		<span class="text-muted" style="width: 3rem">Size { label }:</span>
		<div
			style={ fmt.Sprintf("background: %s; width: %s; height: %s",
				op.Gradient(12),
				op.Size(size),
				op.Size(3)) }
		></div>
		<span class="text-small text-muted">{ op.Size(size) }</span>
	</div>
}

// StyleBuilderExample shows live style building
templ StyleBuilderExample() {
	<div class="card">
		<h3>Style Builder API</h3>
		<div class="grid grid-cols-2 gap-4">
			<div>
				<h4>Code:</h4>
				<pre style={ codeBlockStyle() }>{ styleBuilderCode() }</pre>
			</div>
			<div>
				<h4>Result:</h4>
				<div style={ exampleStyle() }>
					This element uses the style built with the op package!
				</div>
			</div>
		</div>
	</div>
}

func exampleStyle() string {
	return op.NewStyle().
		Background(op.Gradient(15)).
		Color(op.Color.Blue(9)).
		Padding(op.Size(4)).
		PaddingTop(op.Size(6)).
		BorderRadius(op.Radius(3)).
		BoxShadow(op.Shadow(4)).
		FontSize(op.Font.Size(3)).
		Animation(op.Animation.FadeIn()).
		String()
}

func styleBuilderCode() string {
	return `style := op.NewStyle().
	Background(op.Gradient(15)).
	Color(op.Color.Blue(9)).
	Padding(op.Size(4)).
	PaddingTop(op.Size(6)).
	BorderRadius(op.Radius(3)).
	BoxShadow(op.Shadow(4)).
	FontSize(op.Font.Size(3)).
	Animation(op.Animation.FadeIn()).
	String()`
}

func codeBlockStyle() string {
	return op.NewStyle().
		Background(op.Color.Gray(11)).
		Color(op.Color.Gray(0)).
		Padding(op.Size(3)).
		BorderRadius(op.Radius(2)).
		Custom("overflow-x", "auto").
		Custom("font-family", op.Font.Mono()).
		Custom("font-size", op.Font.Size(0)).
		Custom("line-height", op.Font.LineHeight(3)).
		Custom("white-space", "pre").
		String()
}

// HomePage shows all components
templ HomePage() {
	@Layout("Op Package Demo") {
		<header>
			<h2>Component Examples</h2>
			<p>Using the op package for type-safe styling</p>
		</header>
		<section class="mb-4">
			<h3>Dynamic Buttons</h3>
			<div class="flex gap-2 flex-wrap mb-3">
				@DynamicButton("Small Primary", "primary", 2)
				@DynamicButton("Medium Secondary", "secondary", 3)
				@DynamicButton("Large Success", "success", 4)
				@DynamicButton("Extra Large Danger", "danger", 5)
			</div>
			<details>
				<summary>View Code</summary>
				<pre style={ codeBlockStyle() }>{ buttonExampleCode() }</pre>
			</details>
		</section>
		@StyleBuilderExample()
		<section class="mt-4">
			<h3>Theme-Aware Cards</h3>
			<div class="grid grid-cols-2 gap-4">
				<div style={ cardStyle(false) }>
					<h4>Normal Card</h4>
					<p>Uses op.Color.Surface() for background</p>
				</div>
				<div style={ cardStyle(true) }>
					<h4>Elevated Card</h4>
					<p>Adds shadow with op.Shadow(3)</p>
				</div>
			</div>
		</section>
	}
}

func cardStyle(elevated bool) string {
	style := op.NewStyle().
		Background(op.Color.Surface()).
		Padding(op.Size(5)).
		BorderRadius(op.Radius(3))

	if elevated {
		style.BoxShadow(op.Shadow(3))
	} else {
		style.Custom("border", fmt.Sprintf("1px solid %s", op.Color.Border()))
	}

	return style.String()
}

func buttonExampleCode() string {
	return `// Button with dynamic variant and size
@DynamicButton("Button Text", "primary", 3)

// Implementation
style := op.NewStyle().
	Padding(op.Size(size)).
	BorderRadius(op.Radius(2)).
	FontWeight(op.Font.Weight(6)).
	Background(op.Color.Primary()).
	Color("white").
	String()`
}

func colorExampleCode() string {
	return `// Access any color with scale 0-12
backgroundColor := op.Color.Blue(1)    // Light blue
textColor := op.Color.Blue(11)        // Dark blue
borderColor := op.Color.Gray(4)       // Medium gray

// Use in styles
style := op.NewStyle().
	Background(op.Color.Surface()).
	Color(op.Color.Text()).
	Custom("border", fmt.Sprintf("1px solid %s", op.Color.Border())).
	String()`
}

func spacingExampleCode() string {
	return `// Size scale from 000 to 15
padding := op.Size(4)          // var(--size-4)
margin := op.Size(-1)          // var(--size-00)
gap := op.Size(-2)             // var(--size-000)

// Fluid sizes (responsive)
responsivePadding := op.SizeFluid(3)
// Content sizes
maxWidth := op.SizeContent(3)

// In practice
style := op.NewStyle().
	Padding(op.Size(4)).
	Margin(op.Size(2)).
	Custom("gap", op.Size(3)).
	String()`
}

func animationExampleCode() string {
	return `// Apply animations
fadeIn := op.Animation.FadeIn()
bounce := op.Animation.Bounce()
slideUp := op.Animation.SlideInUp()

// With easing functions
easeOut := op.Ease.Out(3)
elasticEase := op.Ease.Elastic(2)

// Complete example
style := op.NewStyle().
	Animation(op.Animation.FadeIn()).
	TransitionProperty("all").
	TransitionDuration("300ms").
	TransitionTimingFunction(op.Ease.Out(3)).
	String()`
}

// ColorsPage shows color scales
templ ColorsPage() {
	@Layout("Colors - Op Package Demo") {
		<header>
			<h2>Color Scales</h2>
			<p>All Open Props colors with op.Color API</p>
		</header>
		<div class="card mb-4">
			<h3>Usage Example</h3>
			<pre style={ codeBlockStyle() }>{ colorExampleCode() }</pre>
		</div>
		@ColorScale("Gray", op.Color.Gray)
		@ColorScale("Blue", op.Color.Blue)
		@ColorScale("Red", op.Color.Red)
		@ColorScale("Green", op.Color.Green)
		@ColorScale("Yellow", op.Color.Yellow)
		@ColorScale("Purple", op.Color.Purple)
		@ColorScale("Pink", op.Color.Pink)
		@ColorScale("Orange", op.Color.Orange)
		<div class="card mt-4">
			<h3>Theme Colors</h3>
			<div class="grid grid-cols-2 gap-4">
				<div>
					<div
						style={ fmt.Sprintf("background: %s; padding: %s; border-radius: %s",
						op.Color.Background(), op.Size(3), op.Radius(2)) }
					>
						Background: { op.Color.Background() }
					</div>
				</div>
				<div>
					<div
						style={ fmt.Sprintf("background: %s; padding: %s; border-radius: %s",
						op.Color.Surface(), op.Size(3), op.Radius(2)) }
					>
						Surface: { op.Color.Surface() }
					</div>
				</div>
				<div>
					<div
						style={ fmt.Sprintf("background: %s; color: white; padding: %s; border-radius: %s",
						op.Color.Primary(), op.Size(3), op.Radius(2)) }
					>
						Primary: { op.Color.Primary() }
					</div>
				</div>
				<div>
					<div
						style={ fmt.Sprintf("border: 1px solid %s; padding: %s; border-radius: %s",
						op.Color.Border(), op.Size(3), op.Radius(2)) }
					>
						Border: { op.Color.Border() }
					</div>
				</div>
			</div>
		</div>
	}
}

// SpacingPage shows spacing system
templ SpacingPage() {
	@Layout("Spacing - Op Package Demo") {
		<header>
			<h2>Spacing System</h2>
			<p>Visual guide to op.Size() values</p>
		</header>
		<div class="card mb-4">
			<h3>Usage Example</h3>
			<pre style={ codeBlockStyle() }>{ spacingExampleCode() }</pre>
		</div>
		@SpacingVisualizer()
		<div class="card mt-4">
			<h3>Fluid Spacing</h3>
			<p>Responsive spacing that scales with viewport</p>
			<div class="flex gap-4">
				for i := 0; i <= 10; i++ {
					<div
						style={ fmt.Sprintf("background: %s; width: %s; height: %s; border-radius: %s",
						op.Gradient(20+i),
						op.SizeFluid(i),
						op.Size(5),
						op.Radius(2)) }
					></div>
				}
			</div>
		</div>
	}
}

// AnimationsPage shows animations
templ AnimationsPage() {
	@Layout("Animations - Op Package Demo") {
		<header>
			<h2>Animations</h2>
			<p>Open Props animations via op.Animation</p>
		</header>
		<div class="card mb-4">
			<h3>Usage Example</h3>
			<pre style={ codeBlockStyle() }>{ animationExampleCode() }</pre>
		</div>
		<div class="grid grid-cols-3 gap-4">
			@AnimatedCard("Fade In", "Smooth entrance animation", op.Animation.FadeIn())
			@AnimatedCard("Scale Up", "Grows from small to normal", op.Animation.ScaleUp())
			@AnimatedCard("Slide In Up", "Slides up from below", op.Animation.SlideInUp())
			@AnimatedCard("Bounce", "Playful bounce effect", op.Animation.Bounce())
			@AnimatedCard("Pulse", "Gentle pulsing animation", op.Animation.Pulse())
			@AnimatedCard("Shake X", "Horizontal shake", op.Animation.ShakeX())
		</div>
		<div class="card mt-4">
			<h3>Easing Functions</h3>
			<div class="grid grid-cols-4 gap-2">
				for i := 1; i <= 5; i++ {
					<button
						style={ fmt.Sprintf("transition: transform 300ms %s", op.Ease.Out(i)) }
						onmouseover="this.style.transform='scale(1.1)'"
						onmouseout="this.style.transform='scale(1)'"
					>
						Ease Out { fmt.Sprintf("%d", i) }
					</button>
				}
			</div>
		</div>
	}
}

// IconsPage shows icon examples
templ IconsPage() {
	@Layout("Icons - Op Package Demo") {
		<header>
			<h2>Lucide Icons</h2>
			<p>Type-safe icons integrated with Open Props</p>
		</header>
		<div class="card mb-4">
			<h3>Basic Usage</h3>
			<div class="flex gap-4 items-center mb-3">
				@icon.Icon(icon.IconHome, templ.Attributes{"style": op.NewStyle().Color(op.Color.Blue(6)).Custom("width", op.Size(6)).Custom("height", op.Size(6)).String()})
				@icon.Icon(icon.IconHeart, templ.Attributes{"style": op.NewStyle().Color(op.Color.Red(6)).Custom("width", op.Size(6)).Custom("height", op.Size(6)).String()})
				@icon.Icon(icon.IconStar, templ.Attributes{"style": op.NewStyle().Color(op.Color.Yellow(6)).Custom("width", op.Size(6)).Custom("height", op.Size(6)).String()})
				@icon.Icon(icon.IconCheck, templ.Attributes{"style": op.NewStyle().Color(op.Color.Green(6)).Custom("width", op.Size(6)).Custom("height", op.Size(6)).String()})
			</div>
			<pre style={ codeBlockStyle() }>{ iconBasicExampleCode() }</pre>
		</div>
		<div class="card mb-4">
			<h3>Icon Buttons</h3>
			<div class="flex gap-2 flex-wrap">
				@IconButton(icon.IconDownload, "Download", "primary")
				@IconButton(icon.IconShare2, "Share", "secondary")
				@IconButton(icon.IconTrash2, "Delete", "danger")
				@IconButton(icon.IconEdit, "Edit", "success")
			</div>
		</div>
		<div class="card mb-4">
			<h3>Navigation Icons</h3>
			<div class="grid grid-cols-8 gap-2">
				for _, iconName := range icon.NavigationIcons()[:16] {
					<div class="text-center p-2 hover:bg-gray-100 rounded" style={ op.NewStyle().Background(op.Color.Surface()).BorderRadius(op.Radius(2)).String() }>
						@icon.Icon(iconName, templ.Attributes{"style": op.NewStyle().Custom("width", op.Size(5)).Custom("height", op.Size(5)).Custom("margin", "0 auto").String()})
						<p class="text-xs mt-1">{ string(iconName) }</p>
					</div>
				}
			</div>
		</div>
		<div class="card">
			<h3>Icon Search</h3>
			<div class="mb-4">
				<input type="text" id="icon-search" placeholder="Search icons..." oninput="searchIcons(this.value)"/>
			</div>
			<div id="search-results" class="grid grid-cols-8 gap-2">
				@ShowSearchResults("home")
			</div>
		</div>
		<script>
			function searchIcons(query) {
				// In a real app, this would make an AJAX request
				console.log('Searching for:', query);
			}
		</script>
	}
}

templ IconButton(iconName icon.IconName, label string, variant string) {
	<button style={ buttonStyle(variant, 3) } class="flex items-center gap-2">
		@icon.Icon(iconName, templ.Attributes{"style": "width: 1rem; height: 1rem;"})
		<span>{ label }</span>
	</button>
}

templ ShowSearchResults(query string) {
	for _, result := range getSearchResults(query) {
		<div class="text-center p-2 hover:bg-gray-100 rounded" style={ op.NewStyle().Background(op.Color.Surface()).BorderRadius(op.Radius(2)).String() }>
			@icon.Icon(result.IconName, templ.Attributes{"style": op.NewStyle().Custom("width", op.Size(5)).Custom("height", op.Size(5)).Custom("margin", "0 auto").String()})
			<p class="text-xs mt-1">{ string(result.IconName) }</p>
		</div>
	}
}

func getSearchResults(query string) []icon.SearchResult {
	searcher := icon.NewIconSearcher()
	results := searcher.Search(query)
	if len(results) > 16 {
		return results[:16]
	}
	return results
}

func iconBasicExampleCode() string {
	return `// Import the icon package
import "github.com/riclib/open-props-css/icon"

// Basic usage with type-safe constants
@icon.Icon(icon.IconHome, templ.Attributes{
    "style": op.NewStyle().
        Color(op.Color.Blue(6)).
        Custom("width", op.Size(6)).
        Custom("height", op.Size(6)).
        String(),
})

// Direct component usage
@icon.Home(templ.Attributes{"class": "w-6 h-6"})

// Icon button component
@IconButton(icon.IconDownload, "Download", "primary")`
}
